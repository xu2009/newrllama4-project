# --- FILE: .github/workflows/release-builder.yml (FINAL & FULLY ROBUST v3) ---
name: Build and Release Pre-compiled Libraries

# FIX FOR LINUX: Add permissions block to allow uploading to releases.
permissions:
  contents: write

on:
  release:
    types: [published]

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            artifact_name: libnewrllama_linux_x64.zip
            lib_name: libnewrllama.so
          - os: windows-latest
            os_name: Windows
            artifact_name: newrllama_windows_x64.zip
            lib_name: newrllama.dll
          - os: macos-13
            os_name: macOS (Intel)
            artifact_name: libnewrllama_macos_x64.zip
            lib_name: libnewrllama.dylib
          - os: macos-14
            os_name: macOS (Apple Silicon)
            artifact_name: libnewrllama_macos_arm64.zip
            lib_name: libnewrllama.dylib

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # --- Platform-specific dependency installation ---
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl libcurl4-openssl-dev

    # FIX FOR WINDOWS v1.0.21: Use PowerShell for better path handling
    - name: Setup vcpkg and install curl (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "##[group]Setting up vcpkg and installing curl..."
        Set-Location $env:GITHUB_WORKSPACE
        git clone https://github.com/microsoft/vcpkg.git vcpkg
        Set-Location vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install curl:x64-windows-static
        $vcpkgRoot = Join-Path $env:GITHUB_WORKSPACE "vcpkg"
        Write-Host "VCPKG_ROOT=$vcpkgRoot"
        "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "##[endgroup]"

    # --- Inject our custom files ---
    - name: Copy custom files to llama.cpp directory
      shell: bash
      run: |
        echo "Copying custom C-API and CMake files..."
        cp custom_files/newrllama_capi.h backend/llama.cpp/
        cp custom_files/newrllama_capi.cpp backend/llama.cpp/
        cp custom_files/CMakeLists.txt.custom backend/llama.cpp/CMakeLists.txt

    # --- Configure and Build ---
    - name: Configure and Build
      shell: bash
      run: |
        cd backend/llama.cpp
        mkdir build && cd build

        # Base CMake arguments
        CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF"
        
        # Platform-specific arguments
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Convert Windows path separators for CMake
          VCPKG_CMAKE_PATH=$(echo "$VCPKG_ROOT" | sed 's|\\|/|g')/scripts/buildsystems/vcpkg.cmake
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=\"$VCPKG_CMAKE_PATH\" -DVCPKG_TARGET_TRIPLET=x64-windows-static"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_ACCELERATE=ON -DLLAMA_METAL=ON"
        else # Linux
          CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_ACCELERATE=ON"
        fi
        
        echo "Configuring with CMake: $CMAKE_ARGS"
        cmake .. $CMAKE_ARGS
        
        echo "Building target 'newrllama'..."
        # CRITICAL FIX for Windows: Use /m for MSBuild, -j for make/ninja
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cmake --build . --config Release --target newrllama --verbose -- /m:2
        else
          cmake --build . --config Release --target newrllama --verbose -- -j 2
        fi
        
    # --- Package and Upload ---
    - name: Package the artifact
      shell: bash
      run: |
        # Create a temporary 'staging' directory for packaging.
        mkdir -p staging/lib
        
        # Define the path to the compiled library.
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_PATH="backend/llama.cpp/build/bin/Release/${{ matrix.lib_name }}"
        else
          LIB_PATH="backend/llama.cpp/build/bin/${{ matrix.lib_name }}"
        fi

        # Copy the library into the staging directory.
        echo "Copying $LIB_PATH to staging/lib/"
        cp "$LIB_PATH" staging/lib/

        # Create the zip archive.
        echo "Creating zip archive: ${{ matrix.artifact_name }}"
        cd staging
        zip -r ../${{ matrix.artifact_name }} .
        cd ..

    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: application/zip