# --- FILE: .github/workflows/release-builder.yml (v1.0.38 - Professional Windows Fix) ---
name: Build and Release Pre-compiled Libraries

# FIX FOR LINUX: Add permissions block to allow uploading to releases.
permissions:
  contents: write

on:
  release:
    types: [published]

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            artifact_name: libnewrllama_linux_x64.zip
            lib_name: libnewrllama.so
          - os: windows-latest
            os_name: Windows
            artifact_name: newrllama_windows_x64.zip
            lib_name: newrllama.dll
          - os: macos-13
            os_name: macOS (Intel)
            artifact_name: libnewrllama_macos_x64.zip
            lib_name: libnewrllama.dylib
          - os: macos-14
            os_name: macOS (Apple Silicon)
            artifact_name: libnewrllama_macos_arm64.zip
            lib_name: libnewrllama.dylib

    runs-on: ${{ matrix.os }}
    
    # Professional Windows configuration
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # --- Platform-specific dependency installation ---
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake curl libcurl4-openssl-dev

    # Windows-specific vcpkg setup
    - name: Setup vcpkg (Windows - Fixed)
      if: matrix.os == 'windows-latest'
      uses: johnwason/vcpkg-action@v6
      id: vcpkg
      with:
        pkgs: curl
        triplet: x64-windows-static
        token: ${{ github.token }}
        
    - name: Set vcpkg environment (Windows - Fixed)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
        echo "VCPKG_CMAKE_PATH=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    # --- Inject our custom files ---
    - name: Copy custom files to llama.cpp directory
      shell: bash
      run: |
        echo "Copying custom C-API and CMake files..."
        cp custom_files/newrllama_capi.h backend/llama.cpp/
        cp custom_files/newrllama_capi.cpp backend/llama.cpp/
        cp custom_files/CMakeLists.txt.custom backend/llama.cpp/CMakeLists.txt
        
        # Copy symbol verification script
        echo "Copying symbol verification script..."
        cp scripts/check_symbols.sh backend/llama.cpp/
        chmod +x backend/llama.cpp/check_symbols.sh

    # --- Configure and Build ---
    - name: Configure and Build
      shell: bash
      run: |
        cd backend/llama.cpp
        mkdir build && cd build

        # Base CMake arguments
        CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF"
        
        # Platform-specific arguments with FIXED path handling
        OS_NAME="${{ matrix.os }}"
        if [[ "$OS_NAME" == "windows-latest" ]]; then
          # FIXED: Use environment variable set by vcpkg action
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${VCPKG_CMAKE_PATH} -DVCPKG_TARGET_TRIPLET=x64-windows-static"
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded"
          echo "üîß Windows: Using vcpkg toolchain at ${VCPKG_CMAKE_PATH}"
        elif [[ "$OS_NAME" == "macos-13" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_ACCELERATE=ON"
          echo "üíª Using CPU acceleration for Intel Mac (Metal disabled)"
        elif [[ "$OS_NAME" == "macos-14" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_ACCELERATE=ON -DGGML_METAL=ON -DGGML_METAL_EMBED_LIBRARY=ON"
          echo "üöÄ Enabling Metal GPU acceleration for Apple Silicon (with embedded library)"
        else # Linux
          CMAKE_ARGS="$CMAKE_ARGS -DLLAMA_ACCELERATE=ON"
        fi
        
        echo "Configuring with CMake: $CMAKE_ARGS"
        # Set a writable runtime output directory to fix Metal file copy issues
        CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${PWD}/bin"
        mkdir -p bin
        cmake .. $CMAKE_ARGS
        
        echo "Building target 'newrllama'..."
        # FIXED BUILD: Use matrix.os for platform detection
        if [[ "$OS_NAME" == "windows-latest" ]]; then
          cmake --build . --config Release --target newrllama --parallel
        else
          cmake --build . --config Release --target newrllama --parallel
        fi

    # --- GLUE-CODE ARCHITECTURE: Verify static library symbol completeness ---
    - name: Verify Static Library Symbols
      shell: bash
      run: |
        cd backend/llama.cpp
        echo "üîç Running symbol verification for glue-code architecture..."
        echo "üìä Platform: ${{ runner.os }} (${{ matrix.os_name }})"
        
        # Run our symbol verification script
        if ./check_symbols.sh build; then
          echo "‚úÖ Static libraries contain all required symbols - glue-code architecture is working!"
          echo "üéØ This platform may be able to use pure static library linking in the future."
        else
          echo "‚ö†Ô∏è  Some symbols missing from static libraries."
          echo "üîß OBJECT library fallback strategy will handle the missing symbols."
          echo "üìà Platform-specific analysis:"
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              echo "    Linux often has symbols in libllama.a but missing from libggml.a"
              ;;
            "macos-13"|"macos-14") 
              echo "    macOS typically needs OBJECT library fallback due to framework integration"
              ;;
            "windows-latest")
              echo "    Windows may have different symbol distribution across static libraries"
              ;;
          esac
          echo "    The build will continue with OBJECT library strategy."
        fi

    # --- Package and Upload ---
    - name: Package the artifact
      shell: bash
      run: |
        # Create a temporary 'staging' directory for packaging.
        mkdir -p staging/lib
        
        # Find the actual location of the compiled library
        echo "üîç Searching for compiled library..."
        find backend/llama.cpp/build -name "*newrllama*" -type f
        
        # Define the path to the compiled library based on platform and actual location
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Check multiple possible locations for Windows
          if [[ -f "backend/llama.cpp/build/bin/Release/${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/bin/Release/${{ matrix.lib_name }}"
          elif [[ -f "backend/llama.cpp/build/Release/${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/Release/${{ matrix.lib_name }}"
          elif [[ -f "backend/llama.cpp/build/${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/${{ matrix.lib_name }}"
          else
            echo "‚ùå Cannot find Windows library file"
            find backend/llama.cpp/build -name "*.dll" -type f
            exit 1
          fi
        else
          # Check multiple possible locations for Unix-like systems
          if [[ -f "backend/llama.cpp/build/bin/${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/bin/${{ matrix.lib_name }}"
          elif [[ -f "backend/llama.cpp/build/${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/${{ matrix.lib_name }}"
          elif [[ -f "backend/llama.cpp/build/lib${{ matrix.lib_name }}" ]]; then
            LIB_PATH="backend/llama.cpp/build/lib${{ matrix.lib_name }}"
          else
            echo "‚ùå Cannot find Unix library file"
            find backend/llama.cpp/build -name "*.so" -o -name "*.dylib" -type f
            exit 1
          fi
        fi

        # Verify the library file exists and copy it
        echo "üìÅ Using library path: $LIB_PATH"
        if [[ -f "$LIB_PATH" ]]; then
          echo "‚úÖ Library file found, copying to staging/lib/"
          cp "$LIB_PATH" staging/lib/
          echo "üìä Library info:"
          ls -la staging/lib/
          file staging/lib/*
        else
          echo "‚ùå Library file not found at: $LIB_PATH"
          exit 1
        fi

        # Create the zip archive.
        echo "üì¶ Creating zip archive: ${{ matrix.artifact_name }}"
        cd staging
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Use PowerShell's Compress-Archive on Windows
          powershell -Command "Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact_name }}"
        else
          # Use zip on Unix-like systems
          zip -r ../${{ matrix.artifact_name }} .
        fi
        cd ..

    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: application/zip