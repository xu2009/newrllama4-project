cmake_minimum_required(VERSION 3.14) # for add_link_options and implicit target directories.
project("llama.cpp" C CXX)
include(CheckIncludeFileCXX)

# --- Critical global settings for cross-platform compatibility ---
set(CMAKE_POSITION_INDEPENDENT_CODE ON) # Solves the -fPIC error on Linux.
set(CMAKE_CXX_STANDARD 17)              # Solves the C++11/17 syntax errors on macOS.
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# GLUE-CODE ARCHITECTURE: Force complete static library builds
# Key insight: Make static libraries contain ALL symbols before we link them
set(GGML_STATIC ON CACHE BOOL "Force GGML static library with complete symbols" FORCE)
set(BUILD_SHARED_LIBS OFF CACHE BOOL "Force all libraries to be static for complete symbol inclusion" FORCE)

# Essential build configuration for symbol completeness
set(LLAMA_BUILD_COMMON ON CACHE BOOL "Build common utils (needed for complete linking)" FORCE)
set(LLAMA_BUILD_TESTS OFF CACHE BOOL "Disable tests for clean build" FORCE)
set(LLAMA_BUILD_TOOLS OFF CACHE BOOL "Disable tools for clean build" FORCE)
set(LLAMA_BUILD_EXAMPLES OFF CACHE BOOL "Disable examples for clean build" FORCE)
set(LLAMA_BUILD_SERVER OFF CACHE BOOL "Disable server for clean build" FORCE)

# Platform-specific backend configuration (ensure symbols are included)
if(APPLE)
    set(GGML_ACCELERATE ON CACHE BOOL "Enable Accelerate framework" FORCE)
    set(GGML_METAL OFF CACHE BOOL "Disable Metal to avoid CI file system issues" FORCE)
    set(GGML_BLAS ON CACHE BOOL "Enable BLAS support" FORCE)
    set(GGML_BLAS_USE_ACCELERATE ON CACHE BOOL "Use Accelerate for BLAS" FORCE)
endif()

# Disable problematic features for clean builds
set(LLAMA_CURL OFF CACHE BOOL "Disable curl dependency for simplicity" FORCE)
set(GGML_ALL_WARNINGS OFF CACHE BOOL "Disable warnings for clean build" FORCE)

# Include original llama.cpp build logic (we ARE the CMakeLists.txt now)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/build-info.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/common.cmake)

# Add subdirectories to build complete static libraries
add_subdirectory(ggml)
add_subdirectory(src)
if (LLAMA_BUILD_COMMON)
    add_subdirectory(common)
endif()

# Find required system libraries
find_package(CURL REQUIRED)

# Check for BLAS availability on macOS
if(APPLE)
    find_library(ACCELERATE_FRAMEWORK Accelerate)
    if(ACCELERATE_FRAMEWORK)
        message(STATUS "Found Accelerate framework - enabling BLAS support with Accelerate")
        set(BLAS_AVAILABLE TRUE)
    else()
        message(STATUS "Accelerate framework not found - disabling BLAS backend")
        set(BLAS_AVAILABLE FALSE)
    endif()
else()
    set(BLAS_AVAILABLE FALSE)
endif()

# === GLUE-CODE ARCHITECTURE: Pure static library linking ===
# Only write "glue code" - don't manually list .c/.cpp files
add_library(newrllama SHARED newrllama_capi.cpp)

# Ensure build order: static libraries must be built before our target
add_dependencies(newrllama llama common ggml)

# Link static libraries with complete symbol inclusion using platform-specific whole-archive
if(APPLE)
    target_link_options(newrllama PRIVATE
        "-Wl,-force_load,$<TARGET_FILE:llama>"
        "-Wl,-force_load,$<TARGET_FILE:common>"
        "-Wl,-force_load,$<TARGET_FILE:ggml>"
    )
elseif(UNIX AND NOT APPLE)
    target_link_libraries(newrllama PRIVATE
        "-Wl,--whole-archive" llama common ggml "-Wl,--no-whole-archive"
    )
elseif(WIN32)
    target_link_options(newrllama PRIVATE 
        "/WHOLEARCHIVE:$<TARGET_FILE:llama>"
        "/WHOLEARCHIVE:$<TARGET_FILE:common>"
        "/WHOLEARCHIVE:$<TARGET_FILE:ggml>"
    )
endif()

# Link system libraries and frameworks
target_link_libraries(newrllama PRIVATE CURL::libcurl)

# Link essential system libraries for all platforms
if(UNIX)
    target_link_libraries(newrllama PRIVATE m pthread)
endif()

# Link Apple frameworks if on macOS
if(APPLE)
    if(ACCELERATE_FRAMEWORK)
        target_link_libraries(newrllama PRIVATE ${ACCELERATE_FRAMEWORK})
        target_compile_definitions(newrllama PRIVATE 
            GGML_USE_ACCELERATE
            GGML_BLAS_USE_ACCELERATE
            ACCELERATE_NEW_LAPACK
        )
    endif()
    
    # Link Foundation framework for basic macOS/iOS types
    find_library(FOUNDATION_FRAMEWORK Foundation)
    if(FOUNDATION_FRAMEWORK)
        target_link_libraries(newrllama PRIVATE ${FOUNDATION_FRAMEWORK})
    endif()
endif()

# Add necessary include directories
target_include_directories(newrllama PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/common"
    "${CMAKE_CURRENT_SOURCE_DIR}/ggml/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/ggml/src"
    "${CMAKE_CURRENT_SOURCE_DIR}/ggml/src/ggml-cpu"
)

# Set final properties for our library
set_target_properties(newrllama PROPERTIES
    OUTPUT_NAME "newrllama"
    C_VISIBILITY_PRESET default
    CXX_VISIBILITY_PRESET default
)
